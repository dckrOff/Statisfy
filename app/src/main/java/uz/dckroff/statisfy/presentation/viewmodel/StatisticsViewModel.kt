package uz.dckroff.statisfy.presentation.viewmodel

import android.annotation.SuppressLint
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import uz.dckroff.statisfy.domain.model.Statistic
import uz.dckroff.statisfy.domain.model.Category
import uz.dckroff.statisfy.domain.repository.CategoryRepository
import uz.dckroff.statisfy.utils.Logger
import uz.dckroff.statisfy.utils.Result
import uz.dckroff.statisfy.utils.UiState
import javax.inject.Inject

/**
 * ViewModel –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
@HiltViewModel
class StatisticsViewModel @Inject constructor(
    private val categoryRepository: CategoryRepository
) : ViewModel() {

    private val _uiState = MutableStateFlow(StatisticsUiState())
    val uiState: StateFlow<StatisticsUiState> = _uiState.asStateFlow()

    private val _effect = MutableStateFlow<StatisticsEffect?>(null)
    val effect: StateFlow<StatisticsEffect?> = _effect.asStateFlow()

    init {
        loadStatistics()
        loadCategories()
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç UI
     */
    fun handleEvent(event: StatisticsEvent) {
        Logger.d("StatisticsViewModel: Processing event: ${event::class.simpleName}")

        when (event) {
            is StatisticsEvent.LoadStatistics -> loadStatistics()
            is StatisticsEvent.RefreshStatistics -> refreshStatistics()
            is StatisticsEvent.RetryLoad -> loadStatistics()
            is StatisticsEvent.FilterByCategory -> filterByCategory(event.category)
            is StatisticsEvent.SearchStatistics -> searchStatistics(event.query)
            is StatisticsEvent.SelectStatistic -> selectStatistic(event.statistic)
            is StatisticsEvent.ClearFilter -> clearFilter()
            is StatisticsEvent.ShareStatistic -> shareStatistic(event.statistic)
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private fun loadStatistics() {
        viewModelScope.launch {
            try {
                Logger.d("StatisticsViewModel: Loading statistics")
                _uiState.value = _uiState.value.copy(
                    isLoading = true,
                    error = null
                )

                // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
                // val result = statisticsRepository.getStatistics()

                // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                val mockStatistics = getMockStatistics()

                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    allStatistics = mockStatistics,
                    filteredStatistics = mockStatistics,
                    error = null
                )

            } catch (e: Exception) {
                Logger.e("StatisticsViewModel: Exception loading statistics", e)
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    error = e.message ?: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                )
            }
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    fun loadCategories() {
        viewModelScope.launch {
            try {
                Logger.d("StatisticsViewModel: Loading categories")

                // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
                // when (val result = categoryRepository.getCategories()) {
                //     is Result.Success -> {
                //         _uiState.value = _uiState.value.copy(categories = result.data)
                //     }
                //     is Result.Error -> {
                //         Logger.e("StatisticsViewModel: Error loading categories: ${result.exception.message}")
                //     }
                // }

                // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                val mockCategories = getMockCategories()
                _uiState.value = _uiState.value.copy(categories = mockCategories)

            } catch (e: Exception) {
                Logger.e("StatisticsViewModel: Exception loading categories", e)
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private fun refreshStatistics() {
        Logger.d("StatisticsViewModel: Refreshing statistics")
        loadStatistics()
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    private fun filterByCategory(category: Category?) {
        Logger.d("StatisticsViewModel: Filtering by category: ${category?.name}")

        val allStats = _uiState.value.allStatistics
        val filteredStats = if (category == null) {
            allStats
        } else {
            allStats.filter { it.category.id == category.id }
        }

        _uiState.value = _uiState.value.copy(
            selectedCategory = category,
            filteredStatistics = filteredStats,
            searchQuery = ""
        )
    }

    /**
     * –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private fun searchStatistics(query: String) {
        Logger.d("StatisticsViewModel: Searching statistics: $query")

        val allStats = _uiState.value.allStatistics
        val filteredStats = if (query.isBlank()) {
            allStats
        } else {
            allStats.filter {
                it.title.contains(query, ignoreCase = true) ||
                it.unit.contains(query, ignoreCase = true) ||
                it.source.contains(query, ignoreCase = true)
            }
        }

        _uiState.value = _uiState.value.copy(
            searchQuery = query,
            filteredStatistics = filteredStats,
            selectedCategory = null
        )
    }

    /**
     * –í—ã–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private fun selectStatistic(statistic: Statistic) {
        Logger.d("StatisticsViewModel: Selecting statistic: ${statistic.title}")
        _uiState.value = _uiState.value.copy(selectedStatistic = statistic)
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    private fun clearFilter() {
        Logger.d("StatisticsViewModel: Clearing filters")
        _uiState.value = _uiState.value.copy(
            selectedCategory = null,
            searchQuery = "",
            filteredStatistics = _uiState.value.allStatistics
        )
    }

    /**
     * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    private fun shareStatistic(statistic: Statistic) {
        Logger.d("StatisticsViewModel: Sharing statistic: ${statistic.title}")

        val shareText = buildString {
            appendLine("üìä ${statistic.title}")
            appendLine("üìà ${statistic.value} ${statistic.unit}")
            appendLine("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${statistic.category.name}")
            appendLine("üìÖ ${statistic.date}")
            appendLine("üîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${statistic.source}")
            appendLine()
            appendLine("–£–∑–Ω–∞–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Statisfy!")
        }

        _effect.value = StatisticsEffect.ShareStatistic(shareText)
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
     */
    fun clearEffect() {
        _effect.value = null
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    @SuppressLint("NewApi")
    private fun getMockStatistics(): List<Statistic> {
        val categories = getMockCategories()

        return listOf(
            Statistic(
                id = "1",
                title = "–ù–∞—Å–µ–ª–µ–Ω–∏–µ –†–æ—Å—Å–∏–∏",
                value = 146.0,
                unit = "–º–ª–Ω —á–µ–ª–æ–≤–µ–∫",
                category = categories[0], // –ù–∞—Å–µ–ª–µ–Ω–∏–µ
                source = "–†–æ—Å—Å—Ç–∞—Ç",
                date = java.time.LocalDate.now()
            ),
            Statistic(
                id = "2",
                title = "–í–í–ü –°–®–ê",
                value = 25.46,
                unit = "—Ç—Ä–ª–Ω –¥–æ–ª–ª–∞—Ä–æ–≤",
                category = categories[1], // –≠–∫–æ–Ω–æ–º–∏–∫–∞
                source = "World Bank",
                date = java.time.LocalDate.now()
            ),
            Statistic(
                id = "3",
                title = "–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –≤ –Ø–ø–æ–Ω–∏–∏",
                value = 84.6,
                unit = "–ª–µ—Ç",
                category = categories[2], // –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                source = "WHO",
                date = java.time.LocalDate.now()
            ),
            Statistic(
                id = "4",
                title = "–£—Ä–æ–≤–µ–Ω—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –≤ –º–∏—Ä–µ",
                value = 86.3,
                unit = "%",
                category = categories[3], // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                source = "UNESCO",
                date = java.time.LocalDate.now()
            ),
            Statistic(
                id = "5",
                title = "–£—Ä–æ–≤–µ–Ω—å CO2 –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ",
                value = 421.0,
                unit = "ppm",
                category = categories[4], // –≠–∫–æ–ª–æ–≥–∏—è
                source = "NOAA",
                date = java.time.LocalDate.now()
            ),
            Statistic(
                id = "6",
                title = "–£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã –≤ –ì–µ—Ä–º–∞–Ω–∏–∏",
                value = 3.1,
                unit = "%",
                category = categories[1], // –≠–∫–æ–Ω–æ–º–∏–∫–∞
                source = "Eurostat",
                date = java.time.LocalDate.now()
            ),
            Statistic(
                id = "7",
                title = "–ù–∞—Å–µ–ª–µ–Ω–∏–µ –ö–∏—Ç–∞—è",
                value = 1412.0,
                unit = "–º–ª–Ω —á–µ–ª–æ–≤–µ–∫",
                category = categories[0], // –ù–∞—Å–µ–ª–µ–Ω–∏–µ
                source = "UN Population Division",
                date = java.time.LocalDate.now()
            ),
            Statistic(
                id = "8",
                title = "–ü–ª–æ—â–∞–¥—å –ª–µ—Å–æ–≤ –≤ –ë—Ä–∞–∑–∏–ª–∏–∏",
                value = 497.0,
                unit = "–º–ª–Ω –≥–∞",
                category = categories[4], // –≠–∫–æ–ª–æ–≥–∏—è
                source = "FAO",
                date = java.time.LocalDate.now()
            )
        )
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    private fun getMockCategories(): List<Category> {
        return listOf(
            Category(id = "1", name = "–ù–∞—Å–µ–ª–µ–Ω–∏–µ"),
            Category(id = "2", name = "–≠–∫–æ–Ω–æ–º–∏–∫–∞"),
            Category(id = "3", name = "–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"),
            Category(id = "4", name = "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"),
            Category(id = "5", name = "–≠–∫–æ–ª–æ–≥–∏—è")
        )
    }
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ UI –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
data class StatisticsUiState(
    val isLoading: Boolean = false,
    val allStatistics: List<Statistic> = emptyList(),
    val filteredStatistics: List<Statistic> = emptyList(),
    val categories: List<Category> = emptyList(),
    val selectedCategory: Category? = null,
    val selectedStatistic: Statistic? = null,
    val searchQuery: String = "",
    val error: String? = null
)

/**
 * –°–æ–±—ã—Ç–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
sealed class StatisticsEvent {
    object LoadStatistics : StatisticsEvent()
    object RefreshStatistics : StatisticsEvent()
    object RetryLoad : StatisticsEvent()
    data class FilterByCategory(val category: Category?) : StatisticsEvent()
    data class SearchStatistics(val query: String) : StatisticsEvent()
    data class SelectStatistic(val statistic: Statistic) : StatisticsEvent()
    object ClearFilter : StatisticsEvent()
    data class ShareStatistic(val statistic: Statistic) : StatisticsEvent()
}

/**
 * –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
sealed class StatisticsEffect {
    data class ShareStatistic(val text: String) : StatisticsEffect()
    data class ShowMessage(val message: String) : StatisticsEffect()
}