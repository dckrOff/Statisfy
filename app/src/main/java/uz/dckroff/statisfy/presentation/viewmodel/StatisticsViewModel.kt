package uz.dckroff.statisfy.presentation.viewmodel

import androidx.lifecycle.viewModelScope
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import uz.dckroff.statisfy.domain.model.UserStats
import uz.dckroff.statisfy.domain.repository.UserStatsRepository
import uz.dckroff.statisfy.domain.repository.UserPreferencesRepository
import uz.dckroff.statisfy.utils.Logger
import uz.dckroff.statisfy.utils.Result
import uz.dckroff.statisfy.utils.UiState
import javax.inject.Inject

/**
 * ViewModel –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
@HiltViewModel
class StatisticsViewModel @Inject constructor(
    private val userStatsRepository: UserStatsRepository,
    private val userPreferencesRepository: UserPreferencesRepository
) : BaseViewModel() {

    private val _uiState = MutableStateFlow(StatisticsUiState())
    val uiState: StateFlow<StatisticsUiState> = _uiState.asStateFlow()

    private val _effect = MutableStateFlow<StatisticsEffect?>(null)
    val effect: StateFlow<StatisticsEffect?> = _effect.asStateFlow()

    init {
        loadUserStats()
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç UI
     */
    fun handleEvent(event: StatisticsEvent) {
        Logger.d("StatisticsViewModel: Processing event: ${event::class.simpleName}")
        
        when (event) {
            is StatisticsEvent.LoadStats -> loadUserStats()
            is StatisticsEvent.RefreshStats -> refreshStats()
            is StatisticsEvent.RetryLoad -> loadUserStats()
            is StatisticsEvent.SelectTimePeriod -> selectTimePeriod(event.period)
            is StatisticsEvent.SelectCategory -> selectCategory(event.categoryId)
            is StatisticsEvent.ShareStats -> shareStats()
            is StatisticsEvent.ExportStats -> exportStats()
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private fun loadUserStats() {
        viewModelScope.launch {
            try {
                Logger.d("StatisticsViewModel: Loading user stats")
                _uiState.value = _uiState.value.copy(
                    isLoading = true,
                    error = null
                )

                val currentUser = userPreferencesRepository.getCurrentUser()
                if (currentUser == null) {
                    Logger.e("StatisticsViewModel: No current user found")
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        error = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
                    return@launch
                }

                when (val result = userStatsRepository.getUserStats(currentUser.id)) {
                    is Result.Success -> {
                        Logger.d("StatisticsViewModel: Stats loaded successfully")
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            userStats = result.data,
                            error = null
                        )
                    }
                    is Result.Error -> {
                        Logger.e("StatisticsViewModel: Error loading stats: ${result.exception.message}")
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            error = result.exception.message ?: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                        )
                    }
                    is Result.Loading -> {
                        _uiState.value = _uiState.value.copy(isLoading = true)
                    }
                }
            } catch (e: Exception) {
                Logger.e("StatisticsViewModel: Exception loading stats", e)
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                )
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private fun refreshStats() {
        Logger.d("StatisticsViewModel: Refreshing stats")
        loadUserStats()
    }

    /**
     * –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private fun selectTimePeriod(period: TimePeriod) {
        Logger.d("StatisticsViewModel: Selecting time period: $period")
        _uiState.value = _uiState.value.copy(selectedTimePeriod = period)
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥—É
    }

    /**
     * –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    private fun selectCategory(categoryId: String?) {
        Logger.d("StatisticsViewModel: Selecting category: $categoryId")
        _uiState.value = _uiState.value.copy(selectedCategoryId = categoryId)
    }

    /**
     * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    private fun shareStats() {
        Logger.d("StatisticsViewModel: Sharing stats")
        val stats = _uiState.value.userStats
        if (stats != null) {
            val shareText = buildShareText(stats)
            _effect.value = StatisticsEffect.ShareStats(shareText)
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private fun exportStats() {
        Logger.d("StatisticsViewModel: Exporting stats")
        val stats = _uiState.value.userStats
        if (stats != null) {
            _effect.value = StatisticsEffect.ExportStats(stats)
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
     */
    private fun buildShareText(stats: UserStats): String {
        return buildString {
            appendLine("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ Statisfy:")
            appendLine()
            appendLine("üìö –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: ${stats.overallStats.totalItemsRead}")
            appendLine("‚è±Ô∏è –í—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${stats.overallStats.totalTimeSpent} –º–∏–Ω")
            appendLine("üèÜ –£—Ä–æ–≤–µ–Ω—å: ${stats.overallStats.currentLevel}")
            appendLine("üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${stats.streakStats.currentStreak} –¥–Ω–µ–π")
            appendLine("‚≠ê –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${stats.achievements.size}")
            appendLine()
            appendLine("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ Statisfy - —É–∑–Ω–∞–≤–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!")
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
     */
    fun clearEffect() {
        _effect.value = null
    }
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ UI –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
data class StatisticsUiState(
    val isLoading: Boolean = false,
    val userStats: UserStats? = null,
    val error: String? = null,
    val selectedTimePeriod: TimePeriod = TimePeriod.ALL_TIME,
    val selectedCategoryId: String? = null,
    val isRefreshing: Boolean = false
)

/**
 * –°–æ–±—ã—Ç–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
sealed class StatisticsEvent {
    object LoadStats : StatisticsEvent()
    object RefreshStats : StatisticsEvent()
    object RetryLoad : StatisticsEvent()
    data class SelectTimePeriod(val period: TimePeriod) : StatisticsEvent()
    data class SelectCategory(val categoryId: String?) : StatisticsEvent()
    object ShareStats : StatisticsEvent()
    object ExportStats : StatisticsEvent()
}

/**
 * –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
sealed class StatisticsEffect {
    data class ShareStats(val text: String) : StatisticsEffect()
    data class ExportStats(val stats: UserStats) : StatisticsEffect()
    data class ShowMessage(val message: String) : StatisticsEffect()
}

/**
 * –ü–µ—Ä–∏–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 */
enum class TimePeriod(val displayName: String) {
    WEEK("–ù–µ–¥–µ–ª—è"),
    MONTH("–ú–µ—Å—è—Ü"),
    YEAR("–ì–æ–¥"),
    ALL_TIME("–í—Å—ë –≤—Ä–µ–º—è")
}